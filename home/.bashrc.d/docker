#!/bin/bash

function docker_wrapper {

  # Add a bunch of (optional) devices
  # (Don't add them unconditionally: if they don't exist, it
  # would prevent the container from starting)
  DEVICES=
  for DEV in /dev/kvm /dev/ttyUSB* /dev/dri/* /dev/snd/*; do
    if [ -b "$DEV" -o -c "$DEV" ]; then
      DEVICES="$DEVICES --device $DEV:$DEV"
    fi
  done

  # And a few (optional) files
  # (Here again, they don't always exist everywhere)
  VOLUMES=
  for VOL in /tmp/.X11-unix /run/user; do
    if [ -e "$VOL" ]; then
      VOLUMES="$VOLUMES --volume $VOL:$VOL"
    fi
  done

  # Check if we are on a tty to decide whether to allocate one
  DASHT=
  tty -s && DASHT=-t

  docker run $DASHT -i -u $(whoami) -w "$HOME" \
		$(env | cut -d= -f1 | awk '{print "-e", $1}') \
		$DOCKERFILES_RUN_FLAGS $DEVICES $VOLUMES \
		-v /etc/passwd:/etc/passwd:ro \
		-v /etc/group:/etc/group:ro \
		-v /etc/localtime:/etc/localtime:ro \
		-v /home:/home \
		"$@"
}

function docker_exec {
    # echo docker inspect --format '{{ .Author }}' "$1"
    # docker inspect --format '{{ .Author }}' "$1"
    # Check if there is a container image with that name
    if ! docker inspect --format '{{ .Author }}' "$1" >&/dev/null; then
      echo "$0: $1: command not found"
      return
    fi

    # Check that it's really the name of the image, not a prefix
    if docker inspect --format '{{ .Id }}' "$1" | grep -q "^$1" ;then
      echo "$0: $1: command not found"
      return
    fi

    docker_wrapper "$@"
}


function docker_compose_wrapper {
  SERVICE=$1
  GIT_ROOT=$(command git rev-parse --show-toplevel 2>/dev/null)

  # check if a docker-compose.yml is present
  if [ -f "$GIT_ROOT/docker-compose.yml" ]; then
    CONTAINER_ID=$(docker-compose ps -q $SERVICE)

    # check if container is running
    if [[ -z "$CONTAINER_ID" ]]; then
      docker-compose up -d $SERVICE
      CONTAINER_ID=$(docker-compose ps -q $SERVICE)
    fi

    if [ -z "$CONTAINER_ID" ]; then
      docker_exec $SERVICE $@
      return
    fi

    IMAGE_ID=$(docker inspect -f {{.Image}} $CONTAINER_ID)
    WORKING_DIR=$(docker inspect -f {{.Config.WorkingDir}} $CONTAINER_ID)

    # Re-link new container with the same links
    LINKS=
    local L=$(docker inspect -f {{.HostConfig.Links}} $CONTAINER_ID);
    for link in ${L:1:-1}; do
      local l=$(echo $link | awk -F/ '{ print "--link="$2$4 }');
      LINKS=$(echo "$LINKS $l" | xargs -n1 | sort -u | xargs);
    done

    DOCKERFILES_RUN_FLAGS="--rm --volumes-from=$CONTAINER_ID --workdir=$WORKING_DIR $LINKS" docker_wrapper $IMAGE_ID $@
  else
    docker_exec $SERVICE $@
  fi
}
