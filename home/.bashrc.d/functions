#!/bin/env sh

# Path functions {{{
    path_append ()  { path_remove $1; export PATH="$1:$PATH"; }
    path_prepend () { path_remove $1; export PATH="$PATH:$1"; }
    path_remove ()  { export PATH=`echo -n $PATH | awk -v RS=: -v ORS=: '$0 != "'$1'"' | sed 's/:$//'`; }
# }}}

function reload {
    source ~/.bashrc
}

function session_type {
  SESSION_TYPE=local
  ([ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]) && SESSION_TYPE=remote/ssh;
  ([ -f /proc/1/cgroup ] && grep ':\/system.slice\/docker-[a-z0-9]*\.scope' /proc/1/cgroup > /dev/null  ) && SESSION_TYPE=remote/docker;
  echo -e $SESSION_TYPE
}

function docker_exec {
    # echo docker inspect --format '{{ .Author }}' "$1"
    # docker inspect --format '{{ .Author }}' "$1"
    # Check if there is a container image with that name
    if ! docker inspect --format '{{ .Author }}' "$1" >&/dev/null; then
      echo "$0: $1: command not found"
      return
    fi

    # Check that it's really the name of the image, not a prefix
    if docker inspect --format '{{ .Id }}' "$1" | grep -q "^$1" ;then
      echo "$0: $1: command not found"
      return
    fi

    # Add a bunch of (optional) devices
    # (Don't add them unconditionally: if they don't exist, it
    # would prevent the container from starting)
    DEVICES=
    for DEV in /dev/kvm /dev/ttyUSB* /dev/dri/* /dev/snd/*; do
      if [ -b "$DEV" -o -c "$DEV" ]; then
        DEVICES="$DEVICES --device $DEV:$DEV"
      fi
    done

    # And a few (optional) files
    # (Here again, they don't always exist everywhere)
    VOLUMES=
    for VOL in /tmp/.X11-unix /run/user; do
      if [ -e "$VOL" ]; then
        VOLUMES="$VOLUMES --volume $VOL:$VOL"
      fi
    done

    # Check if we are on a tty to decide whether to allocate one
    DASHT=
    tty -s && DASHT=-t

    docker run $DASHT -i -u $(whoami) -w "$HOME" \
  		$(env | cut -d= -f1 | awk '{print "-e", $1}') \
  		$DOCKERFILES_RUN_FLAGS $DEVICES $VOLUMES \
  		-v /etc/passwd:/etc/passwd:ro \
  		-v /etc/group:/etc/group:ro \
  		-v /etc/localtime:/etc/localtime:ro \
  		-v /home:/home \
  		"$@"
}

command_not_found_handle() {
  if [[ $(session_type) == "remote/docker" ]]; then
    echo "$0: $1: command not found"
    return
  fi

  docker_exec "$@"
}

kernel-update() {
	KERNEL_NAME=$(eselect kernel show | grep /usr/src/linux | sed -e 's@\s*/usr/src/linux-@@')
	KERNEL_GISTID=${KERNEL_GISTID:-57185c0962633cc43ce9}

	echo Building kernel $KERNEL_NAME
	sudo sh <<- EOF
		zcat /proc/config.gz > /usr/src/linux/.config
		cd /usr/src/linux
		make
		make modules_install
		mount /boot
		make install
		dracut -H '' $KERNEL_NAME
		grub2-mkconfig -o /boot/grub/grub.conf
		umount /boot
	EOF
	cat /usr/src/linux/.config | gist -u $KERNEL_GISTID -f config
}

json() {
	if [ -t 0 ]; then # argument
		python -mjson.tool <<< "$*" | pygmentize -l javascript
	else # pipe
		python -mjson.tool | pygmentize -l javascript
	fi
}
# vim:foldmethod=marker:foldlevel=0
